#配置端口
server.port = 8081

spring.dubbo.applicaon.regtion.name=dubbo-provider
spring.dubbo.applicatiistry=zookeeper://127.0.0.1:2181


spring.datasource.name = gjl
spring.datasource.url = jdbc:mysql://127.0.0.1:3306/weixingjl?characterEncoding=utf8&serverTimezone=UTC
spring.datasource.username = root
spring.datasource.password = 123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver


## CORP_RICH_CTIS，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别
mybatis.mapper-locations = classpath:mapping/*.xml
mybatis.type-aliases-package = com.qqhr.entity  # 注意：对应实体类的路径

#netty
netty.port = 8888
netty.host = 127.0.0.1

#kafka
#spring.kafka.bootstrap-servers: 182.92.106.73:9092
#spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.consumer.group-id: test
#spring.kafka.consumer.key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
################### kafka配置 ############
#消费者ip地址
spring.kafka.consumer.bootstrapServersConfig = 182.92.106.73:9092
# 如果设为true，consumer会定时向ZooKeeper发送已经获取到的消息的offset。当consumer进程挂掉时，
# 已经提交的offset可以继续使用，让新的consumer继续工作。
spring.kafka.consumer.enableAutoCommitConfig = false
#consumer向ZooKeeper发送offset的时间间隔
spring.kafka.consumer.autoCommitIntervalMsConfig = 1000
#消费者序列化
spring.kafka.consumer.keyDeserializerClassConfig = org.apache.kafka.common.serialization.StringDeserializer
#消费者序列化
spring.kafka.consumer.valueDeserializerClassConfig = org.apache.kafka.common.serialization.StringDeserializer
#消费者一次拉取消息数量
spring.kafka.consumer.maxPollRecordsConfig = 8
#消费者拉取时间间隔
spring.kafka.consumer.maxPollIntervalMsConfig = 6000
# kafka 并发度
spring.kafka.consumer.concurrency = 2
# kafka groupId,没有groupId 会启动报错
spring.kafka.consumer.groupIdConfig = bootKafka

#消费者ip地址
spring.kafka.producer.bootstrapServersConfig = 182.92.106.73:9092
#消费者序列化
spring.kafka.producer.keySerializerClassConfig = org.apache.kafka.common.serialization.StringSerializer
#消费者序列化
spring.kafka.producer.valueSerializerClassConfig = org.apache.kafka.common.serialization.StringSerializer
############################ kafka配置 ############