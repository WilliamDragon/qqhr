server.port=8085

################### kafka配置 ############
#消费者ip地址
spring.kafka.consumer.bootstrapServersConfig = 182.92.106.73:9092
# 如果设为true，consumer会定时向ZooKeeper发送已经获取到的消息的offset。当consumer进程挂掉时，
# 已经提交的offset可以继续使用，让新的consumer继续工作。
spring.kafka.consumer.enableAutoCommitConfig = false
#consumer向ZooKeeper发送offset的时间间隔
spring.kafka.consumer.autoCommitIntervalMsConfig = 1000
#消费者序列化
spring.kafka.consumer.keyDeserializerClassConfig = org.apache.kafka.common.serialization.StringDeserializer
#消费者序列化
spring.kafka.consumer.valueDeserializerClassConfig = org.apache.kafka.common.serialization.StringDeserializer
#消费者一次拉取消息数量
spring.kafka.consumer.maxPollRecordsConfig = 8
#消费者拉取时间间隔
spring.kafka.consumer.maxPollIntervalMsConfig = 6000
# kafka 并发度
spring.kafka.consumer.concurrency = 2
# kafka groupId,没有groupId 会启动报错
spring.kafka.consumer.groupIdConfig = bootKafka

#消费者ip地址
spring.kafka.producer.bootstrapServersConfig = 182.92.106.73:9092
#消费者序列化
spring.kafka.producer.keySerializerClassConfig = org.apache.kafka.common.serialization.StringSerializer
#消费者序列化
spring.kafka.producer.valueSerializerClassConfig = org.apache.kafka.common.serialization.StringSerializer
############################ kafka配置 ############