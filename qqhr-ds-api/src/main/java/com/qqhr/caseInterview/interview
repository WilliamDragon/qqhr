https://mp.weixin.qq.com/s/PAERD0EHUXVjhZWAj8cMVg
在线阅读 面试题集合
https://snailclimb.gitee.io/javaguide-interview/#/


其他问题

1.自我介绍。
2.说说你的项目中的亮点有哪些。
3.画一下你的项目的架构图。
4.Restful 了解吗？简单说一下自己对它的认识，如果我要返回一个 boolean 类型的数据怎么办？

Java 基础

1.Java 中的几种基本数据类型是什么？对应的包装类型是什么？各自占用多少字节呢？
     解：byte Byte 1字节
        short Short 2字节
        int Integer 4字节
        long Long 8字节
        char Char 2字节
        float Float 4字节
        double  Double  8字节
        boolen  Boolen 1字节
2.String 、 StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?
     解：String ：字符串内容不经常变化的业务优先使用String。            
        StringBuffer（线程安全）：频繁的进行字符串的拼接裁剪等，并且运行在多线程环境下，优先使用StringBuffer。
        eg:xml解析。
        StringBuilder（线程非安全）：频繁的进行字符串的拼接裁剪等，并且运行在单线程环境下，优先使用StringBuilder。
        eg:sql语句的拼装，json的封装等。
        String，StringBuffer 都是final修饰的，因为无论String还是StringBuffer本质都是数组char[] ,因为String的是final char[]，而StringBuffer的是 char[]  ,多了一个final.

3.== 与 equals?hashCode 与 equals ?
 ==比较的是地址
 equal 比较的值
4.Java 反射？反射有什么缺点？你是怎么理解反射的（为什么框架需要反射）？
5.谈谈对 Java 注解的理解，解决了什么问题？
6.Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？
7.内部类了解吗？匿名内部类了解吗？
8.BIO,NIO,AIO 有什么区别?
 同步阻塞，同步非阻塞，异步非阻塞
Java 集合框架

1.说说 List,Set,Map 三者的区别？三者底层的数据结构？
2.有哪些集合是线程不安全的？怎么解决呢？
3.比较 HashSet、LinkedHashSet 和 TreeSet 三者的异同
4.HashMap 和 Hashtable 的区别？HashMap 和 HashSet 区别？HashMap 和 TreeMap 区别？
5.HashMap 的底层实现
6.HashMap 的长度为什么是 2 的幂次方
7.ConcurrentHashMap 和 Hashtable 的区别？
8.ConcurrentHashMap 线程安全的具体实现方式/底层具体实现

jvm

1.jvm 内存结构
 堆，虚拟机栈，本地方法栈，程序计数器，方法区
2.jvm 调优参数
3.什么是类加载？何时类加载？类加载流程？
4.知道哪些类加载器。类加载器之间的关系？
  启动类加载器，扩展类加载器，应用程序加载器 向上委托，向下传递
5.类加载器的双亲委派了解么？结合 Tomcat 说一下双亲委派（Tomcat 如何打破双亲委托机制？...）。
6.为什么需要双亲委派
 （1）防止重复加载同一个class文件 保证数据安全
 （2）防止核心class 不能被篡改 保证执行安全
7.Java 内存模型
8.栈中存放什么数据，堆中呢？
 栈：存储当前线程执行方法所需要的数据指令
 堆：存储对象实例
9.大对象放在哪个内存区域
 堆
10.堆区如何分类
年轻代（edan s0,s1）， 老年代
11.垃圾回收有哪些算法
   标记清除，复制，标记整理（压缩）
12.GC 的全流程
13.GC 中老年代用什么回收方法？
  标记整理

多线程

1.线程和进程的区别。
2.什么是上下文切换?
3.什么是线程死锁?如何避免死锁?
4.乐观锁和悲观锁了解么？
5.说说 sleep() 方法和 wait() 方法区别和共同点?
6.Java 线程池有哪些参数？阻塞队列有几种？拒绝策略有几种？新线程添加的流程?
7.实现 Runnable 接口和 Callable 接口的区别。
8.讲一下 JMM(Java 内存模型)。volatile 关键字解决了什么问题？说说 synchronized 关键字和 volatile 关键字的区别。
9.AQS 原理了解么？AQS 组件有哪些？
10.用过 CountDownLatch 么？什么场景下用的？

Spring

1.什么是 Spring 框架?
2.列举一些重要的 Spring 模块？
3.谈谈自己对于 Spring IoC 和 AOP 的理解
4.Spring Bean 的生命周期说一下
5.Spring 中的 bean 的作用域有哪些?
6.拦截器和过滤器了解么？
7.Spring 动态代理默认用哪一种
8.hibernate 和 mybatis 区别
9.Spring Boot 和 Spring 的区别
10.说出使用 Spring Boot 的主要优点
11.什么是 Spring Boot Starter?
12.介绍一下@SpringBootApplication 注解
13.Spring Boot 的自动配置是如何实现的?
14.Spring Boot 支持哪些嵌入式 web 容器？

设计模式

1.何为设计模式？有哪些常见的设计模式？
2.单例模式了解么？说一下单例模式的使用场景。手写一个单例模式的实现。
3.观察者模式了解么？说一下观察者模式的使用场景。
4.工厂模式了解么？说一下工厂模式的使用场景。
5.责任链模式了解么？哪些开源项目（Netty、MyBatis ...）中用到了责任链模式？怎么用的？
6.SOLID 原则了解么？简单谈谈自己对于单一职责原则和开闭原则的理解。
7.阅读 Spring 源码的时候什么设计模式最让你影响深刻？能简单讲讲吗？

RPC

RPC 基础：
1.了解 RPC 吗？有哪些常见的 RPC 框架？
2.如果让你自己设计 RPC 框架你会如何设计？
3.服务之间的调用为啥不直接用 HTTP 而用 RPC？

Dubbo:
1.Dubbo 了解吗？
2.Dubbo 的工作原理了解么？注册中心扮演了什么角色？注册中心挂了可以继续通信吗？
3.Dubbo 的负载均衡策略了解么？
4.Dubbo 的 spi 机制了解么？带来了啥好处？

消息队列

1.为什么要用消息队列?
2.对比一下常见的消息队列?
3.如何保证消息不被重复消费?
4.如何保证消息消费的顺序性?

分布式 ID

1.何为 ID？
2.何为分布式 ID？
3.一个合格的分布式 ID 需要满足什么要求?
4.分布式 ID 常见的生成方法有哪些？（数据库主键自增、数据库的号段模式、UUID、SNOWFLAKE 等等）

MySQL
基础

1.非关系型数据库和关系型数据库的区别？
2.事务的四大特性了解么?
3. MySQL 事务隔离级别？默认是什么级别？
4.乐观锁与悲观锁的区别?
5.MySQL 数据库两种存储引擎的区别?

索引

1.为什么索引能提高查询速度?
2.聚集索引和非聚集索引的区别？非聚集索引一定回表查询吗?
3.索引这么多优点，为什么不对表中的每一个列创建一个索引呢？(使用索引一定能提高查询性能吗?)
4.索引底层的数据结构了解么？Hash 索引和 B+树索引优劣分析
5.B+树做索引比红黑树好在哪里？
6.最则左前缀匹配原了解么？
7.什么是覆盖索引

Redis

1.分布式缓存常见的技术选型方案有哪些？说一下 Redis 和 Memcached 的区别和共同点
2.说一下有缓存情况下查询数据和修改数据的流程。
3.Redis 有哪些数据结构？SDS 了解么？
4.Redis 内存满了怎么办？
5.Redis 内存淘汰算法除了 LRU 还有哪些？
6.Redis 给缓存数据设置过期时间有啥用？Redis 是如何判断数据是否过期的呢？
7.Redis 事务了解么？(Redis 可以通过 MULTI，EXEC，DISCARD 和 WATCH 等命令来实现事务功能)
8.缓存穿透和缓存雪崩问题了解么？有哪些解决办法？
9.如何基于 Redis 实现分布式锁？

进阶

1.一条 SQL 语句在 MySQL 中如何执行的？
2.explain 命令了解么？
3.简单说一下 SQL 调优思路。
4.简单说一下大表优化的思路。
5.分库分表了解么？为什么要分库分表？有哪些常见的分库分表工具(sharding-jdbc、TSharding、MyCAT...)？

系统设计/场景题

1.假如有 10 亿个数，只有一个重复，内存只能放下 5 亿个数，怎么找到这个重复的数字？
2.如何设计一个秒杀系统（服务端、数据库、分布式）？分布式系统的设计？
3.有一个服务器专门接收大量请求，怎么设计？
4.如果让你自己设计 RPC 框架你会如何设计？
5.怎么快速出现一个 stackoverflow 错误？

权限认证

1.认证 (Authentication) 和授权 (Authorization)的区别是什么？
2.什么是 Cookie ? Cookie 的作用是什么?如何在服务端使用 Cookie ?
3.Cookie 和 Session 有什么区别？如何使用 Session 进行身份验证？
4.如果没有 Cookie 的话 Session 还能用吗？
5.为什么 Cookie 无法防止 CSRF 攻击，而 token 可以？
6.什么是 Token?什么是 JWT?如何基于 Token 进行身份验证？
7.什么是 OAuth 2.0？
8.什么是 SSO(单点登录)？
地铁：8*22=         176
中饭：20*22=        440
三元牛奶：44*2=     88
鸡蛋：    20*2=     40
第一周：酸菜一袋，大土豆2个 ：20
      ：地瓜2个，黄豆芽：13
第二周：柿子鸡蛋，韭菜鸡蛋 ：19
第三周：酱香饼，疫苗地铁，咸菜（黄米饭）：26
第四周：饺子 黄豆芽 柿子鸡蛋 43
薯片：13 瓜子 22
共：900
网络

1.OSI 与 TCP/IP 各层的结构与功能,都有哪些协议?为什么网络要分层？
2.计算机网络的一些常见状态码
3.ping 所使用的协议
4.TCP 的三次握手与四次挥手的内容？TCP 为什么连接是三次握手而断开是四次握手？
5.TCP 与 UDP 的区别及使用场景
6.TCP 是如何保证传输的可靠性？
7.一次完整的 HTTP 请求所经的步骤
8.HTTP 协议了解么？HTTP 是基于 TCP 还是 UDP 的？
9.HTTP 报文的内容简单说一下！HTTP 请求报文和响应报文中有哪些数据？
10.HTTP 和 HTTPS 的区别了解么？
11.HTTP 请求有哪些常见的状态码？
12.HTTP 长连接和短连接了解么？
13.Cookie 和 Session 的关系
14.URI 和 URL 的区别是什么?

1.AQS
     假设有两个线程同时过来申请锁资源，线程1先获得锁，线程2需要等待的话，主要的流程如下：

         两个线程同时调用 lock 方法，线程1通过CAS(0,1)操作将state值从0变为1，成功加锁。
         线程1通过CAS(0,1)成功后，设置当前加锁线程为自己
         线程2此时也进行CAS(0,1)，此时state已经为1调用肯定会失败
         于是再查看加锁线程是否为自己，如果不是则放入等待队列s
         线程2此时调用LockSupport.park()挂起当前线程。

     加锁流程
     2.释放流程

         线程1执行任务成功调用 unlock 方法，state变量的值递减1，如果tate值为0，加锁线程设置为null，彻底释放锁。
         此时进入等待队列的队头，调用LockSupport.unpark()唤醒线程2重新尝试加锁
         线程2CAS操作将state从0变为1成功之后代表加锁成功，将state设置为1。
         把“加锁线程”设置为线程2自己，同时线程2自己就从等待队列中出队了。

     释放锁流程

    1.ReentrantLock是如何实现非公平和公平的？
    2.互斥锁（只有一个线程拥有锁），重入锁（多个线程加在一个对象上锁住，释放也要释放多次），共享锁（可以和别的线程同时持有一把锁）
     作者：千淘萬漉
     链接：https://www.jianshu.com/p/80d6638fa66c
     来源：简书
     著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
BIO、NIO、AIO
最近一直在准备面试，为了使自己的Java水平更上一个档次，拜读了李林峰老师的《Netty权威指南》，了解了Java关于IO的发展和最新的技术，真是受益匪浅，现在把我总结的关于BIO、NIO和AIO的区别和应用场景概述一遍。

在此之前，先弄清几个概念：

1.同步：使用同步IO时，Java自己处理IO读写。

2.异步：使用异步IO时，Java将IO读写委托给OS处理，需要将数据缓冲区地址和大小传给OS，完成后OS通知Java处理（回调）。

3.阻塞：使用阻塞IO时，Java调用会一直阻塞到读写完成才返回。

4.非阻塞：使用非阻塞IO时，如果不能立马读写，Java调用会马上返回，当IO事件分发器通知可读写时在进行读写，不断循环直到读写完成。

下面是重点了（敲黑板！）！

1.BIO：同步并阻塞，服务器的实现模式是一个连接一个线程，这样的模式很明显的一个缺陷是：由于客户端连接数与服务器线程数成正比关系，可能造成不必要的线程开销，严重的还将导致服务器内存溢出。当然，这种情况可以通过线程池机制改善，但并不能从本质上消除这个弊端。

2.NIO：在JDK1.4以前，Java的IO模型一直是BIO，但从JDK1.4开始，JDK引入的新的IO模型NIO，它是同步非阻塞的。而服务器的实现模式是多个请求一个线程，即请求会注册到多路复用器Selector上，多路复用器轮询到连接有IO请求时才启动一个线程处理。

3.AIO：JDK1.7发布了NIO2.0，这就是真正意义上的异步非阻塞，服务器的实现模式为多个有效请求一个线程，客户端的IO请求都是由OS先完成再通知服务器应用去启动线程处理（回调）。

应用场景：并发连接数不多时采用BIO，因为它编程和调试都非常简单，但如果涉及到高并发的情况，应选择NIO或AIO，更好的建议是采用成熟的网络通信框架Netty。


————————————————
版权声明：本文为CSDN博主「罗啦啦」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。
原文链接：https://blog.csdn.net/qq_24693837/article/details/70335491
